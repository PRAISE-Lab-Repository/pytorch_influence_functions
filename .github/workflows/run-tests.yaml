---
name: Static analysis and unit tests
run-name: Running static analysis and unit tests
on:
  push:
    branches: master
    paths-ignore: 
      - '**.md'
      - '.gitignore'
      - '.gitattributes'
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository on to Github Actions runner
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
          cache: 'pip'

      - name: Install hatch, a python build and environment manager
        run: pip install hatch

      # Testing. For the script definitions, please see `pyproject.toml`
      - name: Run type checking with mypy
        continue-on-error: true
        run: hatch run type-check

      - name: Run static analysis with ruff
        continue-on-error: true
        run: hatch run ruff-check

      - name: Run unit tests with unittest
        continue-on-error: true
        run: hatch run unit-tests

      # Building
      - name: Build package using hatch
        run: hatch build

      # # Gather Release Metadata
      # - name: Retrieve build artefact filenames, filepaths, and set as env variable
      #   working-directory: ${{ github.workspace }}/dist
      #   run: |           
      #     # Source releases
      #     echo "src_name=$(ls *.tar.gz)" >> "$GITHUB_ENV"
      #     echo "src_path=$(realpath $(ls *.tar.gz))" >> "$GITHUB_ENV"
      #     echo "${{ env.src_name }}"
      #     echo "${{ env.src_path }}"

      #     # Wheel releases
      #     echo "whl_name=$(ls *.whl)" >> "$GITHUB_ENV"
      #     echo "whl_path=$(realpath $(ls *.whl))" >> "$GITHUB_ENV"
      #     echo "${{ env.whl_name }}"
      #     echo "${{ env.whl_path }}"

      # - name: Create autogenerated release tag name
      #   id: create_tag_name
      #   run: | 
      #     # First obtain package version from hatch
      #     echo "package_version=$(hatch version)" >> "$GITHUB_ENV"
      #     echo "${{ env.package_version }}"

      #     # Tag names follow the SemVer 2.0.0 convention:
      #     # <major>.<minor>.<patch>+<build>       
      #     echo "tag_name=$(hatch version)+${{ github.run_number }}" >> "$GITHUB_ENV"
      #     echo "tag_name=$(hatch version)+${{ github.run_number }}" >> "$GITHUB_OUTPUT"
      #     echo ${{ env.tag_name }}

      # - name: Create Github release
      #   if: ${{ github.ref_name }} == "master"
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.tag_name }}
      #     release_name: Build for branch (${{ github.ref_name }}) on tag ${{ env.tag_name }}.
      #     body: |
      #       Automatic release build for ${{ github.ref_name }} branch on tag ${{ env.tag_name }}.
      #     draft: false
      #     prerelease: false

      # - name: Upload source distribution to release
      #   if: ${{ github.ref_name }} == "master"
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ${{ env.src_path }}
      #     asset_name: ${{ env.src_name }}
      #     asset_content_type: application/gzip

      # - name: Upload wheel distribution to release
      #   if: ${{ github.ref_name }} == "master"
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ${{ env.whl_path }}
      #     asset_name: ${{ env.whl_name }}
      #     asset_content_type: application/gzip